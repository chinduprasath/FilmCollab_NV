// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  profile   Profile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user_id     String?  // Alternative column name for Supabase compatibility
  full_name   String?
  first_name  String?
  last_name   String?
  role        Role     @default(USER)
  bio         String?
  location    String?
  website     String?
  phone       String?
  dateOfBirth DateTime?
  experience  String?
  education   String?
  skills      String[]
  portfolio   String[]
  socialLinks Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ACTOR
  DIRECTOR
  PRODUCER
  WRITER
  CINEMATOGRAPHER
  PRODUCTION_COMPANY
  EDITOR
  SOUND_DESIGNER
  PRODUCTION_DESIGNER
  COSTUME_DESIGNER
  MAKEUP_ARTIST
  STUNT_COORDINATOR
  VISUAL_EFFECTS_ARTIST
  MUSIC_COMPOSER
  ART_DIRECTOR
  LOCATION_MANAGER
  USER
  ADMIN
}
